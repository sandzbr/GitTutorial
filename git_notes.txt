q : quit the curent command

git status - to check the status of GIT 3 step achitecture status

git init - initialize the git repository for the first time

git add --a : all the changes will stage

git add 'filename' : the specified file to the staging area

git commit -m 'message string' : commits the staged files for snapshot with a message


rm -rf .git : stop git tracking of a folder and remove from git repository

git diff : command compares the staged file and the working file for any difference

git diff --staged : command compares the staged files with the last commit

git commit -a -m 'Direct Commit' : this command directly commits all the tracked files, skipping the staging step. If there is an untracked file, that will not get committed directly

git rm : command to remove (a file or directory)

git mv : move files (e.g. rename a file with this command)

git rm --cached : untracks file from git tracking
		if we add a tracked file into .gitignore, git will still track the file, unless 		explicitly told not to track the file using above command.

git clone URL foldername : this command clones an existing gitgub repository into our PC as a working respository for us to play with

git commit --amend : amend an existing commit

git restore --staged <filename> : to unstage the file

git checkout --<filename>  :  to unmodify the current file and match it with last commit
	git checkout doesn't work on .gitignore file

git checkout -f : this reverts the entire respository to latest previous commit (use carefully)








-- ALL THE GIT LOG COMMANDS --

GITHUB LOG DOCUMENTATION - https://www.git-scm.com/docs/git-log/2.21.0

git log : log of all the changes to be sent

git log -p : shows all the changes committed (actual changes)

git log -p -2 : shows only the latest 2 commit changes, along with the diff, any difference in the code/commits

git log --stat : shows the statistics associated with the logs of the commits

git log --pretty=oneline : displays all commits in one line (includes diff, comments & date)

git log --pretty=short : displays commits in short, without diff, comments & date

git log --pretty=full : displays commits in full, including commit comments & date

git log --since=2.weeks : commits in last 2 weeks

git log --since=2.days : commits in last 2 days etc..

git log --since=2.months or git log --since=2.years etc...

 
format:<string> - format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with %n instead of \n

e.g. commands:
	git log --pretty=format:'%h -- %an'
	git log --pretty=format:'%h -- %ae'
 	git log --pretty=format:'%h -- %cn'
	git log --pretty=format:'%h -- %ce'


-- GENERATING NEW SSH KEYS FOR GITHUB --
Reference:
	https://docs.github.com/en/authentication/connecting-to-github-with-	ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
	
	https://jdblischak.github.io/2014-09-18-chicago/novice/git/05-sshkeys.html



-- PUSHING PC CODE TO GITHUB AS A NEW REPOSITORY -- 

git remote : this returns the name of the hosted git website on a service like github where our website or code is hosted


git remote add origin git@github.com:sandzbr/GitTutorial.git :
	git - create on git
	remote - remote as in hosted on internet
	add - add
	origin - name of the website on which our code will be hosted
	URL - this is the URL to which 'origin' website will point to	

git remote -v : this returns the URLs hosted on git (fetch, push etc.)


git push -u origin master : pushes the local staged files to GITHUB repository













































